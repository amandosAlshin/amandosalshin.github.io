{"version":3,"sources":["reducers/captions.js","reducers/tables.js","reducers/index.js","store/index.js","actions/caption.js","actions/table.js","components/CaptionAdd.js","constants/EmployeeList.js","components/TableAdd.js","components/EmployeePlace.js","components/TextPlace.js","constants/BranchsList.js","components/Monitoring.js","containers/Monitoring.js","components/App.js","serviceWorker.js","index.js"],"names":["captions","state","action","type","isDragging","id","x","y","text","completed","delete","map","caption","tables","employeeId","name","width","height","table","combineReducers","store","createStore","rootReducer","nextTodoId","CaptionAdd","onAddCaption","React","useState","openTextModal","setOpenTextModal","input","setInput","handleCloseText","Fragment","Button","onClick","variant","color","Dialog","open","onClose","aria-labelledby","DialogTitle","DialogContent","TextField","label","InputLabelProps","shrink","fullWidth","onChange","e","target","value","DialogActions","employeeList","TableAdd","onAddTable","setEmployeeId","setOpen","handleClose","Grid","container","spacing","item","xs","select","event","option","MenuItem","key","Rectangle","shapeProps","isSelected","onSelect","shapeRef","useRef","trRef","useEffect","current","nodes","getLayer","batchDraw","useImage","image","onTap","ref","draggable","onDragEnd","onTransformEnd","node","scaleX","scaleY","Math","max","boundBoxFunc","oldBox","newBox","EmployeePlace","data","setTable","selectedId","selectShape","rect","i","newAttrs","Caption","dragStart","dragEnd","fill","TextPlace","setCaption","onDragStartCaption","onDragEndCaption","branchs","useStyles","makeStyles","theme","root","display","margin","modal","alignItems","justifyContent","paper","backgroundColor","palette","background","border","boxShadow","shadows","padding","appBar","zIndex","drawer","content","flexGrow","Monitoring","onSetTable","onSetCaption","onDeleteTable","onDeleteCaption","classes","currency","setCurrency","selectedIdCaption","selectShapeCaption","selectedTable","onSelectTable","selectedCaption","onSelectCatpion","checkDeselect","getStage","className","AppBar","position","Toolbar","Typography","noWrap","Container","maxWidth","onMouseDown","onTouchStart","noValidate","autoComplete","Card","CardContent","gutterBottom","component","CardActions","size","connect","ownProps","dispatch","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.640ce92b.chunk.js","sourcesContent":["const captions = (state = [], action) => {\r\n  switch (action.type) {\r\n    case 'ADD_CAPTION':\r\n      return [\r\n        ...state,\r\n        {\r\n          isDragging: action.isDragging,\r\n          id: action.id,\r\n          x: action.x,\r\n          y: action.y,\r\n          text: action.text,\r\n          completed: false,\r\n          delete: false\r\n        }\r\n      ]\r\n    case 'SET_CAPTION':\r\n      return state.map(caption =>\r\n        caption.id === action.id ? { ...caption, x: action.x, y: action.y,isDragging: action.isDragging } : caption\r\n      )\r\n    case 'DELETE_CAPTION':\r\n      return state.map(caption =>\r\n        caption.id === action.id ? {\r\n          ...caption,\r\n          delete: true\r\n        } : caption\r\n      )\r\n    default:\r\n      return state\r\n  }\r\n}\r\n\r\nexport default captions;\r\n","const tables = (state = [], action) => {\r\n  switch (action.type) {\r\n\r\n    case 'ADD_TABLE':\r\n      return [\r\n        ...state,\r\n        {\r\n          employeeId: action.employeeId,\r\n          id: action.id,\r\n          name: action.name,\r\n          x: 10,\r\n          y: 10,\r\n          width: 100,\r\n          height: 100,\r\n          delete: false\r\n        }\r\n      ]\r\n    case 'SET_TABLE':\r\n      return state.map(table =>\r\n        table.id === action.id ? {\r\n          ...table,\r\n          employeeId: action.employeeId,\r\n          id: action.id,\r\n          x: action.x,\r\n          y: action.y,\r\n          width: action.width,\r\n          height: action.height,\r\n        } : table\r\n      )\r\n    case 'DELETE_TABLE':\r\n      return state.map(table =>\r\n        table.id === action.id ? {\r\n          ...table,\r\n          delete: true\r\n        } : table\r\n      )\r\n    default:\r\n      return state\r\n  }\r\n}\r\n\r\nexport default tables;\r\n","import { combineReducers } from 'redux'\r\nimport captions from './captions'\r\nimport tables from './tables'\r\nexport default combineReducers({\r\n  captions,\r\n  tables\r\n})\r\n","import { createStore } from 'redux'\r\n\r\nimport rootReducer from '../reducers'\r\n\r\nexport const store = createStore(rootReducer);\r\n","\r\nlet nextTodoId = 0\r\nexport const addCaption = value => ({\r\n  type: 'ADD_CAPTION',\r\n  isDragging: false,\r\n  x: 50,\r\n  y: 50,\r\n  id: nextTodoId++,\r\n  text: value\r\n})\r\n\r\nexport const setCaption = value => ({\r\n  type: 'SET_CAPTION',\r\n  id: value.id,\r\n  x: value.x,\r\n  y: value.y,\r\n  isDragging: value.isDragging\r\n})\r\n\r\nexport const deleteCaption = value =>({\r\n  type: 'DELETE_CAPTION',\r\n  id: value\r\n})\r\n","\r\nlet nextTodoId = 0\r\nexport const addTable = value => ({\r\n  type: 'ADD_TABLE',\r\n  name: value.name,\r\n  employeeId: value.employeeId,\r\n  id: nextTodoId++\r\n})\r\n\r\nexport const setTable = value => {\r\n  return {\r\n    type: 'SET_TABLE',\r\n    employeeId: value.employeeId,\r\n    id: value.id,\r\n    x: value.x,\r\n    y: value.y,\r\n    width: value.width,\r\n    height: value.height,\r\n  }\r\n}\r\n\r\nexport const deleteTable = value =>({\r\n  type: 'DELETE_TABLE',\r\n  id: value\r\n})\r\n","import React from 'react'\r\nimport PropTypes from 'prop-types'\r\nimport Button from '@material-ui/core/Button';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport Dialog from '@material-ui/core/Dialog';\r\nimport DialogActions from '@material-ui/core/DialogActions';\r\nimport DialogContent from '@material-ui/core/DialogContent';\r\nimport DialogTitle from '@material-ui/core/DialogTitle';\r\nconst CaptionAdd = ({onAddCaption }) => {\r\n  const [openTextModal, setOpenTextModal] = React.useState(false);\r\n  const [input, setInput] = React.useState(\"\");\r\n  const handleOpenTextModal = () => {\r\n     setOpenTextModal(true);\r\n\r\n  };\r\n  const handleCloseText = () => {\r\n     setOpenTextModal(false);\r\n     setInput(\"\");\r\n  };\r\n  return(\r\n    <React.Fragment>\r\n      <Button onClick={handleOpenTextModal} variant=\"contained\" color=\"primary\">\r\n        Добавить текст\r\n      </Button>\r\n      <Dialog open={openTextModal} onClose={handleCloseText} aria-labelledby=\"form-dialog-title\">\r\n        <DialogTitle id=\"form-dialog-title\">Добавить текст</DialogTitle>\r\n        <DialogContent>\r\n          <TextField\r\n            id=\"outlined-multiline-flexible\"\r\n            label=\"Текст\"\r\n            variant=\"outlined\"\r\n            InputLabelProps={{\r\n              shrink: true,\r\n            }}\r\n            fullWidth\r\n            onChange={e => setInput(e.target.value)}\r\n            value={input}\r\n          />\r\n        </DialogContent>\r\n        <DialogActions>\r\n          <Button onClick={handleCloseText} color=\"primary\">\r\n            Отмена\r\n          </Button>\r\n          <Button onClick={()=>{onAddCaption(input); handleCloseText(); }} color=\"primary\">\r\n            Добавить\r\n          </Button>\r\n        </DialogActions>\r\n      </Dialog>\r\n    </React.Fragment>\r\n  )\r\n}\r\n\r\nCaptionAdd.propTypes = {\r\n  onAddCaption: PropTypes.func.isRequired\r\n}\r\n\r\nexport default CaptionAdd\r\n","export const employeeList = [\r\n  {\r\n    id: 1102,\r\n    name: \"Amandos Daulet\"\r\n  },\r\n  {\r\n    id: 1103,\r\n    name: \"Ospan Bagdaulet\"\r\n  },\r\n  {\r\n    id: 1104,\r\n    name: \"Kunikiev Kanat\"\r\n  },\r\n  {\r\n    id: 1105,\r\n    name: \"Berdikul Nurkhan\"\r\n  },\r\n]\r\n","import React from 'react'\r\nimport PropTypes from 'prop-types'\r\nimport Button from '@material-ui/core/Button';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport Dialog from '@material-ui/core/Dialog';\r\nimport DialogActions from '@material-ui/core/DialogActions';\r\nimport DialogContent from '@material-ui/core/DialogContent';\r\nimport DialogTitle from '@material-ui/core/DialogTitle';\r\nimport MenuItem from '@material-ui/core/MenuItem';\r\nimport {employeeList} from '../constants/EmployeeList';\r\nconst TableAdd = ({onAddTable }) => {\r\n  const [employeeId, setEmployeeId] = React.useState(1104);\r\n  const [open, setOpen] = React.useState(false);\r\n  const [input, setInput] = React.useState(false);\r\n  const handleOpen = () => {\r\n     setOpen(true);\r\n  };\r\n  const handleClose = () => {\r\n     setOpen(false);\r\n     setInput();\r\n  };\r\n  return(\r\n    <React.Fragment>\r\n      <Button onClick={handleOpen} variant=\"contained\" color=\"primary\">\r\n        Добавить стол\r\n      </Button>\r\n      <Dialog open={open} onClose={handleClose} aria-labelledby=\"form-dialog-title\">\r\n        <DialogTitle id=\"form-dialog-title\">Добавить текст</DialogTitle>\r\n        <DialogContent>\r\n          <Grid container spacing={2}>\r\n            <Grid item xs={12}>\r\n              <TextField\r\n                id=\"outlined-multiline-flexible\"\r\n                label=\"Название\"\r\n                variant=\"outlined\"\r\n                fullWidth\r\n                InputLabelProps={{\r\n                  shrink: true,\r\n                }}\r\n                onChange={e => setInput(e.target.value)}\r\n                value={input || \"\"}\r\n              />\r\n            </Grid>\r\n            <Grid item xs={12}>\r\n              <TextField\r\n                id=\"outlined-multiline-flexible\"\r\n                label=\"Сотрудник\"\r\n                select\r\n                value={employeeId}\r\n                variant=\"outlined\"\r\n                onChange={(event)=>{setEmployeeId(event.target.value);}}\r\n                InputLabelProps={{\r\n                  shrink: true,\r\n                }}\r\n              >\r\n                {\r\n                  employeeList.map((option)=>(\r\n                    <MenuItem key={option.id} value={option.id}>\r\n                      {option.name}\r\n                    </MenuItem>\r\n                  ))\r\n                }\r\n              </TextField>\r\n            </Grid>\r\n          </Grid>\r\n        </DialogContent>\r\n        <DialogActions>\r\n          <Button onClick={handleClose} color=\"primary\">\r\n            Отмена\r\n          </Button>\r\n          <Button onClick={()=>{onAddTable({employeeId: employeeId,name: input}); handleClose(); }} color=\"primary\">\r\n            Добавить\r\n          </Button>\r\n        </DialogActions>\r\n      </Dialog>\r\n    </React.Fragment>\r\n  )\r\n}\r\n\r\nTableAdd.propTypes = {\r\n  onAddTable: PropTypes.func.isRequired\r\n}\r\n\r\nexport default TableAdd\r\n","import React from 'react';\r\nimport { Transformer, Image } from 'react-konva';\r\nimport useImage from 'use-image';\r\n\r\nconst Rectangle = ({ shapeProps, isSelected, onSelect, onChange }) => {\r\n  const shapeRef = React.useRef();\r\n  const trRef = React.useRef();\r\n\r\n  React.useEffect(() => {\r\n    if (isSelected) {\r\n      // we need to attach transformer manually\r\n      trRef.current.nodes([shapeRef.current]);\r\n      trRef.current.getLayer().batchDraw();\r\n    }\r\n  }, [isSelected]);\r\n  const [image] = useImage('img/table.png');\r\n  return (\r\n    <React.Fragment>\r\n      <Image\r\n        onClick={onSelect}\r\n        image={image}\r\n        onTap={onSelect}\r\n        ref={shapeRef}\r\n        {...shapeProps}\r\n        draggable\r\n        onDragEnd={(e) => {\r\n          onChange({\r\n            ...shapeProps,\r\n            x: e.target.x(),\r\n            y: e.target.y(),\r\n          });\r\n        }}\r\n        onTransformEnd={(e) => {\r\n          // transformer is changing scale of the node\r\n          // and NOT its width or height\r\n          // but in the store we have only width and height\r\n          // to match the data better we will reset scale on transform end\r\n          const node = shapeRef.current;\r\n          const scaleX = node.scaleX();\r\n          const scaleY = node.scaleY();\r\n\r\n          // we will reset it back\r\n          node.scaleX(1);\r\n          node.scaleY(1);\r\n          onChange({\r\n            ...shapeProps,\r\n            x: node.x(),\r\n            y: node.y(),\r\n            // set minimal value\r\n            width: Math.max(5, node.width() * scaleX),\r\n            height: Math.max(node.height() * scaleY),\r\n          });\r\n        }}\r\n      />\r\n      {isSelected && (\r\n        <Transformer\r\n          ref={trRef}\r\n          boundBoxFunc={(oldBox, newBox) => {\r\n            // limit resize\r\n            if (newBox.width < 5 || newBox.height < 5) {\r\n              return oldBox;\r\n            }\r\n            return newBox;\r\n          }}\r\n        />\r\n      )}\r\n    </React.Fragment>\r\n  );\r\n};\r\n\r\nconst EmployeePlace = ({data, setTable, selectedId,selectShape}) => {\r\n  return(\r\n    <React.Fragment>\r\n      {data.map((rect, i) => {\r\n          if(rect.delete === false){\r\n            return(\r\n                <Rectangle\r\n                  key={i}\r\n                  shapeProps={rect}\r\n                  isSelected={rect.id === selectedId}\r\n                  onSelect={() => {\r\n                    selectShape(rect.id);\r\n                  }}\r\n                  onChange={(newAttrs) => {\r\n                    setTable(newAttrs);\r\n                  }}\r\n                />\r\n            );\r\n          }else{\r\n            return false\r\n          }\r\n        }\r\n      )}\r\n    </React.Fragment>\r\n  );\r\n};\r\nexport default EmployeePlace;\r\n","import React from 'react';\r\nimport { Transformer, Text } from 'react-konva';\r\nimport PropTypes from 'prop-types'\r\nconst Caption = ({ shapeProps, x, y, isDragging, text, dragStart, dragEnd,id, onSelect,isSelected,onChange}) => {\r\n  const shapeRef = React.useRef();\r\n  const trRef = React.useRef();\r\n  React.useEffect(() => {\r\n    if (isSelected) {\r\n      // we need to attach transformer manually\r\n      trRef.current.nodes([shapeRef.current]);\r\n      trRef.current.getLayer().batchDraw();\r\n    }\r\n  }, [isSelected]);\r\n  return (\r\n    <React.Fragment>\r\n      <Text\r\n        onClick={onSelect}\r\n        text={text}\r\n        ref={shapeRef}\r\n        onTap={onSelect}\r\n        x={x}\r\n        y={y}\r\n        {...shapeProps}\r\n        draggable\r\n        fill={isDragging ? 'green' : 'black'}\r\n        dragStart={() => {\r\n          dragStart({x: x,y: y, id: id,text:text});\r\n        }}\r\n        onDragEnd={e => {\r\n          dragEnd({x: e.target.x(),y: e.target.y(), id: id,text:text});\r\n        }}\r\n        onTransformEnd={(e) => {\r\n          // transformer is changing scale of the node\r\n          // and NOT its width or height\r\n          // but in the store we have only width and height\r\n          // to match the data better we will reset scale on transform end\r\n          const node = shapeRef.current;\r\n          const scaleX = node.scaleX();\r\n          const scaleY = node.scaleY();\r\n\r\n          // we will reset it back\r\n          node.scaleX(1);\r\n          node.scaleY(1);\r\n          onChange({\r\n            ...shapeProps,\r\n            x: node.x(),\r\n            y: node.y(),\r\n            // set minimal value\r\n            width: Math.max(5, node.width() * scaleX),\r\n            height: Math.max(node.height() * scaleY),\r\n          });\r\n        }}\r\n      />\r\n      {isSelected && (\r\n        <Transformer\r\n          ref={trRef}\r\n          boundBoxFunc={(oldBox, newBox) => {\r\n            // limit resize\r\n            if (newBox.width < 5 || newBox.height < 5) {\r\n              return oldBox;\r\n            }\r\n            return newBox;\r\n          }}\r\n        />\r\n      )}\r\n    </React.Fragment>\r\n  );\r\n};\r\n\r\nconst TextPlace = ({data,setCaption,selectShape,selectedId}) => {\r\n  const onDragStartCaption = (key,x,y,id,text)=>{\r\n    setCaption({isDragging: true,x: x, y: y, id: id});\r\n  }\r\n  const onDragEndCaption = (key,x,y,id,text)=>{\r\n    setCaption({isDragging: false,x: x, y: y, id: id});\r\n  }\r\n  return(\r\n      <React.Fragment>\r\n        {data.map((text, i) => {\r\n          if(text.delete === false){\r\n            return (\r\n                <Caption\r\n                   key={i}\r\n                   x={text.x}\r\n                   y={text.y}\r\n                   isDragging={text.isDragging}\r\n                   text={text.text}\r\n                   dragStart={onDragStartCaption}\r\n                   dragEnd={onDragEndCaption}\r\n                   id={text.id}\r\n                   onSelect={()=>{\r\n                     selectShape(text.id);\r\n                   }}\r\n                   onChange={(newAttrs) => {\r\n                     setCaption(newAttrs);\r\n                   }}\r\n                   isSelected={text.id === selectedId}\r\n                   shapeProps={text}\r\n                />\r\n              );\r\n          }else{\r\n            return false\r\n          }\r\n\r\n          }\r\n        )}\r\n      </React.Fragment>\r\n  );\r\n};\r\n\r\n\r\nTextPlace.propTypes = {\r\n  data: PropTypes.arrayOf(\r\n    PropTypes.shape({\r\n      id: PropTypes.number.isRequired,\r\n      isDragging: PropTypes.bool.isRequired,\r\n      x: PropTypes.number.isRequired,\r\n      y: PropTypes.number.isRequired,\r\n      text: PropTypes.string.isRequired\r\n    }).isRequired\r\n  ).isRequired\r\n}\r\nexport default TextPlace;\r\n","export const branchs = [\r\n  {\r\n    value: '1003',\r\n    label: 'Базар-Коргонский',\r\n  },\r\n  {\r\n    value: '1004',\r\n    label: 'Балыкчинский',\r\n  },\r\n  {\r\n    value: '1005',\r\n    label: 'Дордойский',\r\n  },\r\n  {\r\n    value: '1006',\r\n    label: 'Кадамжайский',\r\n  },\r\n];\r\n","import React from 'react';\r\nimport '../App.css';\r\nimport Container from '@material-ui/core/Container';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport AppBar from '@material-ui/core/AppBar';\r\nimport Toolbar from '@material-ui/core/Toolbar';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport MenuItem from '@material-ui/core/MenuItem';\r\nimport Button from '@material-ui/core/Button';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport PropTypes from 'prop-types'\r\nimport CaptionAdd from './CaptionAdd.js';\r\nimport TableAdd from './TableAdd.js';\r\nimport { Stage, Layer } from 'react-konva';\r\nimport Employee from './EmployeePlace';\r\nimport TextPlace from './TextPlace';\r\nimport Card from '@material-ui/core/Card';\r\nimport CardActions from '@material-ui/core/CardActions';\r\nimport CardContent from '@material-ui/core/CardContent';\r\nimport {branchs} from '../constants/BranchsList.js';\r\nconst useStyles = makeStyles((theme) => ({\r\n  root: {\r\n    display: 'flex',\r\n    '& .MuiTextField-root': {\r\n      margin: theme.spacing(1),\r\n      width: '100%',\r\n    },\r\n    '& > *': {\r\n      margin: theme.spacing(1),\r\n    },\r\n  },\r\n  modal: {\r\n    display: 'flex',\r\n    alignItems: 'center',\r\n    justifyContent: 'center',\r\n  },\r\n  paper: {\r\n    backgroundColor: theme.palette.background.paper,\r\n    border: '2px solid #e4e4e4',\r\n    boxShadow: theme.shadows[5],\r\n    padding: theme.spacing(2, 4, 3),\r\n  },\r\n  appBar: {\r\n    zIndex: theme.zIndex.drawer + 1,\r\n  },\r\n  content: {\r\n    flexGrow: 1,\r\n    padding: theme.spacing(3),\r\n  },\r\n}));\r\nfunction Monitoring({captions,tables,onAddTable,onSetTable, onAddCaption, onSetCaption, onDeleteTable,onDeleteCaption}) {\r\n  const classes = useStyles();\r\n  const [currency, setCurrency] = React.useState('1004');\r\n  const handleChange = (event) => {\r\n      setCurrency(event.target.value);\r\n  };\r\n\r\n  const [selectedId, selectShape] = React.useState(null);\r\n  const [selectedIdCaption, selectShapeCaption] = React.useState(null);\r\n  const [selectedTable, onSelectTable] = React.useState(null);\r\n  const [selectedCaption, onSelectCatpion] = React.useState(null);\r\n  const checkDeselect = (e) => {\r\n    // deselect when clicked on empty area\r\n    const clickedOnEmpty = e.target === e.target.getStage();\r\n    if (clickedOnEmpty) {\r\n      selectShape(null);\r\n      selectShapeCaption(null);\r\n      onSelectCatpion(null);\r\n      onSelectTable(null);\r\n    }\r\n  };\r\n  const infoCaption = (id)=>{\r\n    selectShapeCaption(id);\r\n    captions.map(caption =>{\r\n        if(caption.id === id){\r\n            onSelectCatpion(caption);\r\n            return true;\r\n        }else {\r\n          return false;\r\n        }\r\n    });\r\n  }\r\n  const infoTable = (id)=>{\r\n    selectShape(id);\r\n    tables.map(table =>{\r\n        if(table.id === id){\r\n            onSelectTable(table);\r\n            return true;\r\n        }else {\r\n          return false;\r\n        }\r\n    });\r\n  }\r\n  return(\r\n      <React.Fragment>\r\n        <div className={classes.root}>\r\n          <AppBar position=\"fixed\" className={classes.appBar}>\r\n            <Toolbar>\r\n              <Typography variant=\"h6\" noWrap>\r\n                Мониторинг\r\n              </Typography>\r\n            </Toolbar>\r\n          </AppBar>\r\n          <main className={classes.content}>\r\n          <Toolbar />\r\n            <Container maxWidth=\"xl\">\r\n              <Grid container spacing={2}>\r\n                 <Grid item xs={8}>\r\n                   <div className=\"area\">\r\n                      <Stage\r\n                        width={1000}\r\n                        height={600}\r\n                        onMouseDown={checkDeselect}\r\n                        onTouchStart={checkDeselect}\r\n                      >\r\n                        <Layer>\r\n                          <Employee data={tables} setTable={onSetTable} selectedId={selectedId} selectShape={infoTable}/>\r\n                          <TextPlace  setCaption={onSetCaption} data={captions} selectShape={infoCaption} selectedId={selectedIdCaption} />\r\n                        </Layer>\r\n                      </Stage>\r\n                   </div>\r\n                 </Grid>\r\n                 <Grid item xs={4}>\r\n                   <form className={classes.root} noValidate autoComplete=\"off\">\r\n                     <Grid container spacing={2}>\r\n                        <Grid item xs={12}>\r\n                          <TextField\r\n                            id=\"outlined-multiline-flexible\"\r\n                            label=\"Отделение\"\r\n                            select\r\n                            value={currency}\r\n                            variant=\"outlined\"\r\n                            onChange={handleChange}\r\n                            InputLabelProps={{\r\n                              shrink: true,\r\n                            }}\r\n                          >\r\n                              {branchs.map((option) => (\r\n                                <MenuItem key={option.value} value={option.value}>\r\n                                  {option.label}\r\n                                </MenuItem>\r\n                              ))}\r\n                          </TextField>\r\n                        </Grid>\r\n                        <Grid item xs={12}>\r\n                          <div className={classes.root}>\r\n                              {\r\n                                tables.map((table, i) => {\r\n                                  return(\r\n                                      <Button key={i} variant=\"outlined\">{table.name}</Button>\r\n                                    );\r\n                                  }\r\n                                )\r\n                              }\r\n                          </div>\r\n                         </Grid>\r\n                        <Grid item xs={5}>\r\n                          <TableAdd onAddTable={onAddTable} />\r\n                        </Grid>\r\n                        <Grid item xs={5}>\r\n                          <CaptionAdd onAddCaption={onAddCaption}/>\r\n                        </Grid>\r\n                        <Grid item xs={12}>\r\n                          {\r\n                            selectedTable !=  null ?\r\n                              <Card>\r\n                                 <CardContent>\r\n                                   <Typography gutterBottom variant=\"h5\" component=\"h2\">\r\n                                     {selectedTable.name}\r\n                                   </Typography>\r\n                                   <Typography variant=\"body2\" color=\"textSecondary\" component=\"p\">\r\n                                     Сотрудник: {selectedTable.employeeId}\r\n                                   </Typography>\r\n                                 </CardContent>\r\n                                 <CardActions>\r\n                                   <Button onClick={()=>onDeleteTable(selectedTable.id)} size=\"small\" color=\"primary\">\r\n                                     Удалить\r\n                                   </Button>\r\n                                 </CardActions>\r\n                               </Card>\r\n                            :\r\n                              false\r\n                          }\r\n                          {\r\n                            selectedCaption  !=  null ?\r\n                              <Card>\r\n                                 <CardContent>\r\n                                   <Typography gutterBottom variant=\"h5\" component=\"h2\">\r\n                                     {selectedCaption.text}\r\n                                   </Typography>\r\n                                 </CardContent>\r\n                                 <CardActions>\r\n                                   <Button onClick={()=>onDeleteCaption(selectedCaption.id)} size=\"small\" color=\"primary\">\r\n                                     Удалить\r\n                                   </Button>\r\n                                 </CardActions>\r\n                               </Card>\r\n                            :\r\n                              false\r\n                          }\r\n                        </Grid>\r\n                       </Grid>\r\n                   </form>\r\n                 </Grid>\r\n              </Grid>\r\n            </Container>\r\n          </main>\r\n        </div>\r\n      </React.Fragment>\r\n  );\r\n}\r\nMonitoring.propTypes = {\r\n  captions: PropTypes.arrayOf(\r\n    PropTypes.shape({\r\n      id: PropTypes.number.isRequired,\r\n      isDragging: PropTypes.bool.isRequired,\r\n      x: PropTypes.number.isRequired,\r\n      y: PropTypes.number.isRequired,\r\n      text: PropTypes.string.isRequired\r\n    }).isRequired\r\n  ).isRequired,\r\n  onAddCaption: PropTypes.func.isRequired,\r\n  onSetCaption: PropTypes.func.isRequired,\r\n  onDeleteTable:  PropTypes.func.isRequired,\r\n}\r\nexport default Monitoring;\r\n","import { connect } from 'react-redux'\r\n\r\nimport { addCaption,setCaption,deleteCaption } from '../actions/caption'\r\nimport { addTable,setTable,deleteTable } from '../actions/table'\r\nimport Monitoring from '../components/Monitoring'\r\n\r\nconst mapStateToProps = (state, ownProps) => ({\r\n  captions: state.captions,\r\n  tables: state.tables,\r\n})\r\n\r\nconst mapDispatchToProps = (dispatch) => ({\r\n  onAddTable: (data)=>dispatch(addTable(data)),\r\n  onSetTable: (data)=>dispatch(setTable(data)),\r\n  onAddCaption: (data) => dispatch(addCaption(data)),\r\n  onSetCaption: (data)=>dispatch(setCaption(data)),\r\n  onDeleteTable: (data)=>dispatch(deleteTable(data)),\r\n  onDeleteCaption: (data)=>dispatch(deleteCaption(data))\r\n})\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Monitoring)\r\n","import React from 'react'\r\nimport Monitoring from '../containers/Monitoring'\r\n\r\nconst App = () => (\r\n  <div>\r\n    <Monitoring />\r\n  </div>\r\n)\r\n\r\nexport default App\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport { Provider } from 'react-redux'\nimport {store} from './store';\nimport App from './components/App';\n// import { Provider } from 'react-redux'\n// // import store from './store'\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n    <Provider store={store}>\n      <App />\n    </Provider>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}